{"version":3,"sources":["components/ContactForm/ContactForm.module.css","App.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Notification/Notification.module.css","redux/contacts/contacts-selectors.js","redux/contactsAPI.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","redux/contacts/contacts-actions.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","App.js","redux/contacts/contacts-reducers.js","redux/store.js","index.js"],"names":["module","exports","getFilter","state","contacts","filter","getContacts","items","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","createContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","contactId","useFetchContactsQuery","useCreateContactMutation","useDeleteContactMutation","ContactForm","useState","name","setName","number","setNumber","useSelector","addContact","isLoading","isSuccess","isError","handleChange","useCallback","e","target","value","handleSubmit","preventDefault","phone","checkSameContact","find","toLowerCase","toast","position","resetForm","useEffect","success","error","onSubmit","className","s","form","label","input","onChange","type","pattern","title","required","button","disabled","color","height","width","ContactListItem","id","item","onClick","addNewContact","createAction","filterContactByName","ContactList","filteredContacts","setFilteredContacts","filterValue","dispatch","useDispatch","data","normalizedFilter","includes","actions","list","map","contact","length","filterNote","Filter","Notification","App","app","createReducer","_","payload","combineReducers","store","configureStore","reducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.198d043d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__tBfFN\",\"label\":\"ContactForm_label__c_y-h ContactForm_form__tBfFN\",\"input\":\"ContactForm_input__11bdB\",\"button\":\"ContactForm_button__3mDJn ContactForm_input__11bdB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__HOhlY\",\"title\":\"App_title__1m7d9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3TeZg\",\"button\":\"ContactListItem_button__W5WzX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__107GJ\",\"filterNote\":\"ContactList_filterNote__3_11v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__4VGGr\",\"input\":\"Filter_input__12yeS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__nsdVz\"};","export const getFilter = state => state.contacts.filter\r\nexport const getContacts = state => state.contacts.items","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\nexport const contactsApi = createApi({\r\n    reducerPath: 'contactsApi',\r\n    baseQuery: fetchBaseQuery({\r\n        baseUrl: 'https://619a0d669022ea0017a7b006.mockapi.io/api/v1'\r\n    }),\r\n    tagTypes: ['Contact'],\r\n    endpoints: builder => ({\r\n        fetchContacts: builder.query({\r\n            query: () => '/contacts',\r\n            providesTags: ['Contact'],\r\n        }),\r\n        createContact: builder.mutation({\r\n            query: newContact => ({\r\n                url: '/contacts',\r\n                method: 'POST',\r\n                body: newContact,\r\n            }),\r\n            invalidatesTags: ['Contact'],\r\n        }),\r\n        deleteContact: builder.mutation({\r\n            query: contactId => ({\r\n                url: `/contacts/${contactId}`,\r\n                method: 'DELETE'\r\n            }),\r\n            invalidatesTags: ['Contact'],\r\n        }),\r\n    })\r\n})\r\n\r\n\r\nexport const { useFetchContactsQuery, useCreateContactMutation, useDeleteContactMutation } = contactsApi","import PropTypes from 'prop-types'\r\nimport s from './ContactForm.module.css'\r\nimport { useState, useCallback, useEffect } from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors'\r\nimport { useCreateContactMutation } from '../../redux/contactsAPI'\r\nimport Loader from \"react-loader-spinner\"\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\n\r\nexport function ContactForm() {\r\n    const [name, setName] = useState('')\r\n    const [number, setNumber] = useState('')\r\n    const contacts = useSelector(getContacts)\r\n    const [addContact , { isLoading, isSuccess, isError }] = useCreateContactMutation()\r\n\r\n    const handleChange = useCallback((e) => {\r\n        switch (e.target.name) {\r\n            case 'name':\r\n                setName(e.target.value)\r\n                break\r\n            case 'number':\r\n                setNumber(e.target.value)\r\n                break\r\n            default:\r\n                return\r\n        }\r\n    }, [])\r\n    \r\n    const handleSubmit = useCallback((e) => {\r\n      e.preventDefault()\r\n      const newContact = {\r\n        name: name,\r\n        phone: number,\r\n      }\r\n      const checkSameContact = contacts.find(e => e.name.toLowerCase() === newContact.name.toLowerCase())\r\n      if (!checkSameContact) {\r\n        addContact(newContact)\r\n      } else {\r\n        toast(`${checkSameContact.name} is already in contacts`, {position: 'top-center'})\r\n      }\r\n      resetForm()\r\n    }, [addContact, contacts, name, number])\r\n\r\n    const resetForm = () => {\r\n        setName('')\r\n        setNumber('')\r\n  }\r\n  \r\n  useEffect(() => {\r\n        if (isSuccess) {\r\n            toast.success('Contact created')\r\n        }\r\n        if (isError) {\r\n            toast.error('Oops, there was an error. Contact not created')\r\n        }\r\n    },[isSuccess, isError])\r\n\r\n    return(\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            onChange={handleChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            onChange={handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.button} disabled={isLoading}>\r\n          {isLoading ? (<Loader type=\"Oval\" color=\"black\" height={46} width={46} />) : (<>Add contact</>)}\r\n        </button>\r\n        {isSuccess && <Toaster position=\"top-right\" />}\r\n        {isError && <Toaster position=\"top-right\" />}\r\n      </form>\r\n    )\r\n}\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.array,\r\n  dispatch: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport s from './ContactListItem.module.css'\r\nimport { useEffect} from 'react'\r\nimport { useDeleteContactMutation } from '../../redux/contactsAPI'\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport Loader from \"react-loader-spinner\"\r\n\r\nexport function ContactListItem({name, phone, id}) {\r\n    const [deleteContact, { isLoading, isSuccess, isError}] = useDeleteContactMutation()\r\n   \r\n    useEffect(() => {\r\n        if (isSuccess) {\r\n            toast.success('Contact deleted')\r\n        }\r\n        if (isError) {\r\n            toast.error('Oops, there was an error. Contact not deleted')\r\n        }\r\n    },[isSuccess, isError])\r\n\r\n    return (\r\n        <>\r\n            <li className={s.item}>\r\n                {name}: {phone}\r\n                <button\r\n                    className={s.button}\r\n                    onClick={() =>deleteContact(id)}\r\n                    disabled={isLoading}\r\n                    >\r\n                    {isLoading ?\r\n                        (<Loader type=\"Oval\" color=\"black\" height={10} width={10} />)\r\n                        : (<>X</>)}\r\n                </button>\r\n            </li>\r\n            {isSuccess && <Toaster position=\"top-right\" />}\r\n            {isError && <Toaster position=\"top-right\" />}\r\n        </>\r\n    )\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    name: PropTypes.string,\r\n    phone: PropTypes.string,\r\n    id: PropTypes.string\r\n}","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addNewContact = createAction('contacts/add')\r\nexport const filterContactByName = createAction('contacts/filterByName')","import { ContactListItem } from '../ContactListItem/ContactListItem'\r\nimport PropTypes from 'prop-types'\r\nimport s from './ContactList.module.css'\r\nimport { useEffect, useState } from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport * as actions from '../../redux/contacts/contacts-actions'\r\nimport { getFilter} from '../../redux/contacts/contacts-selectors'\r\nimport { useFetchContactsQuery } from '../../redux/contactsAPI'\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\n\r\nexport function ContactList() {\r\n    const [filteredContacts, setFilteredContacts] = useState([])\r\n    const filterValue = useSelector(getFilter)\r\n    const dispatch = useDispatch()\r\n    const { data, isSuccess, isError, isLoading } = useFetchContactsQuery()\r\n\r\n    useEffect(() => {\r\n        if (isLoading) {\r\n           toast.success('Contacts list updated')\r\n        }\r\n        const normalizedFilter = filterValue.toLowerCase();\r\n        try {\r\n            setFilteredContacts(data.filter(({ name }) => name.toLowerCase().includes(normalizedFilter)))\r\n            dispatch(actions.addNewContact(data))\r\n        } catch (error) {\r\n            if (isError) {\r\n               toast.error('Oops, there was an error. Contact list not updated');\r\n           }\r\n          return error\r\n        }\r\n    }, [data, dispatch, filterValue, isError, isLoading, isSuccess]);\r\n    \r\n    return (\r\n        <>\r\n            <ul className={s.list}>\r\n                {filteredContacts.map(contact => {\r\n                    return (\r\n                        <ContactListItem key={contact.id} {...contact}/>\r\n                    )\r\n                })} \r\n            </ul>\r\n            {filterValue !== '' && filteredContacts.length === 0 &&\r\n                <p className={s.filterNote}>Contact with name <b>{filterValue}</b> not found</p>}\r\n            {isSuccess && <Toaster position=\"top-right\" />}\r\n            {isError && <Toaster position=\"top-right\" />}\r\n        </>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    filteredContacts: PropTypes.array,\r\n    filterValue: PropTypes.string,\r\n    dispatch: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport s from './Filter.module.css'\r\nimport {useDispatch} from 'react-redux'\r\nimport * as actions from '../../redux/contacts/contacts-actions'\r\nimport { useCallback } from 'react'\r\n\r\n\r\nexport function Filter() {\r\n    const dispatch = useDispatch()\r\n\r\n    const onChange = useCallback((e) => {\r\n        const value = e.target.value.toLowerCase()\r\n        dispatch(actions.filterContactByName(value))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <label className={s.label}>\r\n            Find contact by name\r\n            <input className={s.input} type=\"text\" onChange={onChange}/>\r\n        </label>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    dispatch: PropTypes.func\r\n}\r\n","import s from './Notification.module.css'\r\nexport function Notification() {\r\n    return (\r\n        <p className={s.title}>Contact list is empty</p>\r\n    )\r\n}","import s from './App.module.css';\r\nimport { ContactForm } from './components/ContactForm/ContactForm'\r\nimport { ContactList } from './components/ContactList/ContactList'\r\nimport { Filter } from './components/Filter/Filter'\r\nimport { Notification } from './components/Notification/Notification'\r\nimport { useSelector } from 'react-redux'\r\nimport { getContacts} from './redux/contacts/contacts-selectors'\r\n\r\n\r\n\r\nfunction App() {\r\n  const contacts = useSelector(getContacts)\r\n  \r\n  return (\r\n    <div className={s.app}>\r\n      <h1 className={s.title}>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2 className={s.title}>Contacts</h2>\r\n      {contacts.length > 1 && <Filter />}\r\n      {contacts.length === 0 && <Notification />}\r\n      <ContactList />\r\n    </div>)\r\n}\r\n\r\nexport default App;","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport * as actions from './contacts-actions'\r\n\r\nconst items = createReducer([], {\r\n    [actions.addNewContact]: (_, { payload }) => [...payload]\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [actions.filterContactByName]: (_, { payload }) => payload\r\n})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n})","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from './contacts/contacts-reducers';\r\nimport { contactsApi } from \"./contactsAPI\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: getDefaultMiddleware => [\r\n    ...getDefaultMiddleware(),\r\n    contactsApi.middleware,\r\n  ]\r\n})\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}